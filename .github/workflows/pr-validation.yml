name: Pull Request Validation

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate PR Requirements
        run: |
          PR_NUMBER='${{ github.event.number }}'
          PR_TITLE='${{ github.event.pull_request.title }}'
          PR_AUTHOR='${{ github.event.pull_request.user.login }}'
          BASE_BRANCH='${{ github.event.pull_request.base.ref }}'
          HEAD_BRANCH='${{ github.event.pull_request.head.ref }}'
          
          echo "üîç Validating Pull Request #$PR_NUMBER"
          echo "PR Title: $PR_TITLE"
          echo "PR Author: $PR_AUTHOR"
          echo "Base Branch: $BASE_BRANCH"
          echo "Head Branch: $HEAD_BRANCH"
          
          # Check if PR references an issue
          PR_BODY='${{ github.event.pull_request.body }}'
          if echo "$PR_BODY" | grep -q "#[0-9]"; then
            echo "‚úÖ PR references an issue"
          else
            echo "‚ùå PR doesn't reference an issue - this is required"
            exit 1
          fi
          
          # Check if PR has a description
          if [ -n "$PR_BODY" ]; then
            echo "‚úÖ PR has a description"
          else
            echo "‚ùå PR description is empty - this is required"
            exit 1
          fi
          
          # Check if PR title follows convention
          if echo "$PR_TITLE" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|security):"; then
            echo "‚úÖ PR title follows conventional commit format"
          else
            echo "‚ö†Ô∏è PR title doesn't follow conventional commit format"
          fi

      - name: Run Security Checks
        run: |
          echo "üîí Running security checks..."
          
          # Check for hardcoded secrets (more specific patterns)
          if grep -r "password\s*=\s*[\"'][^\"']*[\"']" --include="*.py" . | grep -v "getenv\|os.getenv"; then
            echo "‚ùå Potential hardcoded passwords found"
            exit 1
          fi
          
          if grep -r "secret\s*=\s*[\"'][^\"']*[\"']" --include="*.py" . | grep -v "getenv\|os.getenv"; then
            echo "‚ùå Potential hardcoded secrets found"
            exit 1
          fi
          
          if grep -r "key\s*=\s*[\"'][^\"']*[\"']" --include="*.py" . | grep -v "getenv\|os.getenv" | grep -v "\.keys()"; then
            echo "‚ùå Potential hardcoded keys found"
            exit 1
          fi
          
          echo "‚úÖ No hardcoded secrets detected"
          
          # Check for TODO/FIXME comments
          if grep -r "TODO\|FIXME" --include="*.py" .; then
            echo "‚ö†Ô∏è TODO/FIXME comments found - please address before merging"
          fi

      - name: Run Code Quality Checks
        run: |
          echo "üìä Running code quality checks..."
          
          # Check Python syntax
          python -m py_compile enhanced_commute_collector_cloud.py
          python -m py_compile config_cloud.py
          python -m py_compile cloud_run_server.py
          echo "‚úÖ Python syntax check passed"
          
          # Check for common issues
          if grep -r "print(" --include="*.py" . | grep -v "test"; then
            echo "‚ö†Ô∏è Print statements found - consider using logging"
          fi

      - name: Test Configuration
        run: |
          echo "üß™ Testing configuration..."
          
          # Install required dependencies for testing
          pip install -r requirements.txt
          
          # Test if config can be imported
          python -c "import config_cloud; print('‚úÖ Config import successful')"
          
          # Test if required modules can be imported
          python -c "import enhanced_commute_collector_cloud; print('‚úÖ Main module import successful')"

      - name: Update Project Board
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const issueNumbers = pr.body.match(/#(\d+)/g);
            
            if (issueNumbers) {
              for (const issueRef of issueNumbers) {
                const issueNum = issueRef.replace('#', '');
                console.log(`PR references issue #${issueNum}`);
                
                try {
                  // Add PR validation comment to issue
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNum,
                    body: `üîç **Pull Request Validation**\n\nPR: #${pr.number}\nTitle: ${pr.title}\nStatus: ‚úÖ Validation passed\nURL: ${pr.html_url}\n\n**Checks Passed:**\n- ‚úÖ References issue\n- ‚úÖ Has description\n- ‚úÖ Security checks passed\n- ‚úÖ Code quality checks passed\n- ‚úÖ Configuration test passed`
                  });
                  console.log(`‚úÖ Successfully commented on issue #${issueNum}`);
                } catch (error) {
                  console.log(`‚ö†Ô∏è Could not comment on issue #${issueNum}: ${error.message}`);
                  console.log(`This is not a critical error - validation still passed`);
                }
              }
            }

  test-deployment:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test Docker Build
        run: |
          echo "üê≥ Testing Docker build..."
          
          # Test if Dockerfile exists and is valid
          if [ -f "Dockerfile" ]; then
            echo "‚úÖ Dockerfile found"
            
            # Check for hardcoded credentials in Dockerfile
            if grep -q "ENV.*PASSWORD\|ENV.*SECRET\|ENV.*KEY" Dockerfile; then
              echo "‚ùå Hardcoded credentials found in Dockerfile"
              exit 1
            else
              echo "‚úÖ No hardcoded credentials in Dockerfile"
            fi
          else
            echo "‚ùå Dockerfile not found"
            exit 1
          fi

      - name: Test Cloud Build Configuration
        run: |
          echo "‚òÅÔ∏è Testing Cloud Build configuration..."
          
          if [ -f "cloudbuild.yaml" ]; then
            echo "‚úÖ cloudbuild.yaml found"
            
            # Validate YAML syntax
            python -c "import yaml; yaml.safe_load(open('cloudbuild.yaml')); print('‚úÖ cloudbuild.yaml syntax valid')"
          else
            echo "‚ùå cloudbuild.yaml not found"
            exit 1
          fi

      - name: Update Project Board with Test Results
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const issueNumbers = pr.body.match(/#(\d+)/g);
            
            if (issueNumbers) {
              for (const issueRef of issueNumbers) {
                const issueNum = issueRef.replace('#', '');
                
                try {
                  // Add test results comment to issue
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNum,
                    body: `üß™ **Deployment Test Results**\n\nPR: #${pr.number}\nStatus: ‚úÖ All tests passed\n\n**Tests Passed:**\n- ‚úÖ Docker build test\n- ‚úÖ Cloud Build configuration test\n- ‚úÖ No hardcoded credentials detected\n\nReady for review and merge! üöÄ`
                  });
                  console.log(`‚úÖ Successfully commented on issue #${issueNum}`);
                } catch (error) {
                  console.log(`‚ö†Ô∏è Could not comment on issue #${issueNum}: ${error.message}`);
                  console.log(`This is not a critical error - tests still passed`);
                }
              }
            }
